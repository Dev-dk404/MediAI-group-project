# -*- coding: utf-8 -*-
"""diabetes

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SI4EjsOLoEOxxaQuGzbcdTdFBP7gYRQG
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation
from keras.callbacks import ModelCheckpoint
import tensorflow as tf

df = pd.read_csv('pima-indians-diabetes.csv')
df.head()

df.duplicated().sum()

df.drop_duplicates(inplace=True)

columns = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']

for col in columns:
    df[col].replace(0, np.NaN, inplace=True)
df.dropna(inplace=True)
df.info()

X = df.drop('Outcome',axis=1)
X = StandardScaler().fit_transform(X)
y= df['Outcome']

X_train, X_test, y_train,y_test = train_test_split(X, y,test_size=0.20,random_state=0)
X_train.shape, y_train.shape,X_test.shape,y_test.shape

model = Sequential()
model.add(Dense(8, activation = 'relu', input_shape = X_train[0].shape))

model.add(Dense(8, activation='relu'))

model.add(Dense(4, activation='relu')) 

model.add(Dense(1, activation='sigmoid')) 
model.summary()

# opt = keras.optimizers.Adam(learning_rate = 0.0001)
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['acc'])

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['acc'])

checkpointer = ModelCheckpoint('diabetes.h5', monitor='val_acc', mode='max', verbose=2, save_best_only=True)
history=model.fit(X_train, y_train, batch_size=16, epochs=350, validation_data=(X_test, y_test), callbacks=[checkpointer])

present_model = keras.models.load_model('diabetes.h5')
print("Accuracy of our model on test data : " , present_model.evaluate(X_test,y_test)[1]*100, "%")

# Convert the model
converter = tf.lite.TFLiteConverter.from_keras_model(model) # path to the SavedModel directory
tflite_model = converter.convert()

# Save the model.
with open('diabetes_model.tflite', 'wb') as f:
  f.write(tflite_model)

