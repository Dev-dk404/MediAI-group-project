# -*- coding: utf-8 -*-
"""Alzheimer's

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qbfiAuG5pnICKgSp63WKyWpT2xUE9HE6
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation
from keras.callbacks import ModelCheckpoint
import tensorflow as tf

df= pd.read_csv('oasis_longitudinal.csv')
#getting sum og null values
print(df.isna().sum())
#mapping female to 1 and male to 2
df['M/F'] = df['M/F'].replace(['F','M'],[1,2])
#replacing demented group to 1 and non-demented to 0
df['Group'] = df['Group'].apply(lambda x: 1 if x == 'Demented' else 0)
#dropping unnecessary columns
df=df.drop(['Hand','Subject ID','MRI ID','Visit'],axis = 1)
#filling null values with median values
df = df.fillna(df.median())

print(df.isna().sum())

df.head()

#converting columns to float
print(df.dtypes)

X = df.drop('Group',axis = 1)

y = df['Group']

#splitting dataset into training set and testing set
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.2)
X_train.shape, y_train.shape,X_test.shape,y_test.shape
X_train = np.asarray(X_train).astype('float32')
y_train = np.asarray(y_train).astype('float32')

#creating the model
model = Sequential()
model.add(Dense(10, activation = 'relu'))

model.add(Dense(8, activation='relu'))

model.add(Dense(4, activation='relu')) 

model.add(Dense(1, activation='sigmoid')) 
model.build(input_shape=(298,10))
model.summary()

#compiling model

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['acc'])
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['acc'])



#fitting model
# model.fit(X_train, y_train, batch_size=16, epochs=150)
# model.evaluate(X_test,y_test,verbose=0)
# print("%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))

checkpointer = ModelCheckpoint("Alzheimers.h5", monitor='val_acc', mode='max', verbose=2, save_best_only=True)

history=model.fit(X_train, y_train, batch_size=16, epochs=350, validation_data=(X_test, y_test), callbacks=[checkpointer])

present_model = keras.models.load_model('Alzheimers.h5')

print("Accuracy of our model on test data : " , present_model.evaluate(X_test,y_test)[1]*100, "%")

converter = tf.lite.TFLiteConverter.from_keras_model(present_model) # path to the SavedModel directory
converter.target_spec.supported_ops = [
  tf.lite.OpsSet.TFLITE_BUILTINS, # enable TensorFlow Lite ops.
  tf.lite.OpsSet.SELECT_TF_OPS # enable TensorFlow ops.
]

tflite_model = converter.convert()

with open('Alzheimers.tflite','wb') as f:
  f.write(tflite_model)

